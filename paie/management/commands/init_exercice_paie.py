"""
Commande pour initialiser les donn√©es de l'exercice de paie
Entreprise COMATEX SARL - Employ√© Diallo Mamadou
"""
from django.core.management.base import BaseCommand
from django.utils import timezone
from datetime import date
from decimal import Decimal

from core.models import Societe, Etablissement, Service, Poste
from employes.models import Employe
from paie.models import (
    ParametrePaie, Constante, RubriquePaie, Variable,
    PeriodePaie, BulletinPaie
)


class Command(BaseCommand):
    help = 'Initialise les donn√©es de l\'exercice de paie COMATEX SARL'

    def handle(self, *args, **options):
        self.stdout.write(self.style.SUCCESS('üè¢ Initialisation exercice de paie COMATEX SARL...'))
        
        # 1. Cr√©er la soci√©t√©
        societe = self.creer_societe()
        
        # 2. Cr√©er l'√©tablissement
        etablissement = self.creer_etablissement(societe)
        
        # 3. Cr√©er le service
        service = self.creer_service(etablissement)
        
        # 4. Cr√©er le poste
        poste = self.creer_poste(service)
        
        # 5. Cr√©er l'employ√©
        employe = self.creer_employe(etablissement, service, poste)
        
        # 6. Cr√©er les rubriques de paie
        self.creer_rubriques_paie()
        
        # 7. Cr√©er la p√©riode octobre 2025
        periode = self.creer_periode_octobre_2025()
        
        # 8. Mettre √† jour les constantes si n√©cessaire
        self.verifier_constantes()
        
        self.stdout.write(self.style.SUCCESS('‚úÖ Initialisation termin√©e avec succ√®s!'))
        self.stdout.write(self.style.SUCCESS(f'   Soci√©t√© : {societe.raison_sociale}'))
        self.stdout.write(self.style.SUCCESS(f'   Employ√© : {employe.nom} {employe.prenoms}'))
        self.stdout.write(self.style.SUCCESS(f'   P√©riode : {periode}'))

    def creer_societe(self):
        """Cr√©er la soci√©t√© COMATEX SARL"""
        self.stdout.write('üè¢ Cr√©ation de la soci√©t√© COMATEX SARL...')
        
        societe, created = Societe.objects.get_or_create(
            raison_sociale='COMATEX SARL',
            defaults={
                'forme_juridique': 'SARL',
                'ville': 'Conakry',
                'pays': 'Guin√©e',
                'actif': True
            }
        )
        
        if created:
            self.stdout.write(self.style.SUCCESS('  ‚úì Soci√©t√© COMATEX SARL cr√©√©e'))
        else:
            self.stdout.write(self.style.WARNING('  ‚ö† Soci√©t√© COMATEX SARL d√©j√† existante'))
        
        return societe

    def creer_etablissement(self, societe):
        """Cr√©er l'√©tablissement principal"""
        self.stdout.write('üè≠ Cr√©ation de l\'√©tablissement...')
        
        etablissement, created = Etablissement.objects.get_or_create(
            societe=societe,
            code_etablissement='COMATEX-001',
            defaults={
                'nom_etablissement': 'Si√®ge COMATEX',
                'type_etablissement': 'Si√®ge',
                'ville': 'Conakry',
                'actif': True
            }
        )
        
        if created:
            self.stdout.write(self.style.SUCCESS('  ‚úì √âtablissement cr√©√©'))
        else:
            self.stdout.write(self.style.WARNING('  ‚ö† √âtablissement d√©j√† existant'))
        
        return etablissement

    def creer_service(self, etablissement):
        """Cr√©er le service Maintenance"""
        self.stdout.write('üîß Cr√©ation du service Maintenance...')
        
        service, created = Service.objects.get_or_create(
            etablissement=etablissement,
            code_service='MAINT',
            defaults={
                'nom_service': 'Maintenance',
                'actif': True
            }
        )
        
        if created:
            self.stdout.write(self.style.SUCCESS('  ‚úì Service Maintenance cr√©√©'))
        else:
            self.stdout.write(self.style.WARNING('  ‚ö† Service Maintenance d√©j√† existant'))
        
        return service

    def creer_poste(self, service):
        """Cr√©er le poste Technicien en maintenance"""
        self.stdout.write('üë∑ Cr√©ation du poste...')
        
        poste, created = Poste.objects.get_or_create(
            code_poste='TECH-MAINT',
            defaults={
                'intitule_poste': 'Technicien en maintenance',
                'service': service,
                'categorie_professionnelle': 'Agent de ma√Ætrise',
                'actif': True
            }
        )
        
        if created:
            self.stdout.write(self.style.SUCCESS('  ‚úì Poste Technicien en maintenance cr√©√©'))
        else:
            self.stdout.write(self.style.WARNING('  ‚ö† Poste d√©j√† existant'))
        
        return poste

    def creer_employe(self, etablissement, service, poste):
        """Cr√©er l'employ√© Diallo Mamadou"""
        self.stdout.write('üë§ Cr√©ation de l\'employ√© Diallo Mamadou...')
        
        employe, created = Employe.objects.get_or_create(
            matricule='COMATEX-001',
            defaults={
                'civilite': 'M.',
                'nom': 'Diallo',
                'prenoms': 'Mamadou',
                'sexe': 'M',
                'situation_matrimoniale': 'Mari√©(e)',
                'nombre_enfants': 2,
                'date_naissance': date(1990, 1, 1),
                'nationalite': 'Guin√©enne',
                'num_cnss_individuel': '123456789',
                'etablissement': etablissement,
                'service': service,
                'poste': poste,
                'date_embauche': date(2024, 1, 1),
                'type_contrat': 'CDI',
                'statut_employe': 'Actif',
                'telephone_principal': '+224 620 00 00 00',
            }
        )
        
        if created:
            self.stdout.write(self.style.SUCCESS('  ‚úì Employ√© Diallo Mamadou cr√©√©'))
            self.stdout.write(self.style.SUCCESS(f'     Matricule : {employe.matricule}'))
            self.stdout.write(self.style.SUCCESS(f'     CNSS : {employe.num_cnss_individuel}'))
            self.stdout.write(self.style.SUCCESS(f'     Situation : {employe.situation_matrimoniale}, {employe.nombre_enfants} enfants'))
        else:
            self.stdout.write(self.style.WARNING('  ‚ö† Employ√© d√©j√† existant'))
        
        return employe

    def creer_rubriques_paie(self):
        """Cr√©er les rubriques de paie n√©cessaires"""
        self.stdout.write('üí∞ Cr√©ation des rubriques de paie...')
        
        rubriques = [
            # GAINS
            {
                'code_rubrique': 'SALBASE',
                'libelle_rubrique': 'Salaire de base',
                'type_rubrique': 'gain',
                'soumis_cnss': True,
                'soumis_irg': True,
                'ordre_calcul': 10,
                'ordre_affichage': 10,
            },
            {
                'code_rubrique': 'PRIME_TRANSP',
                'libelle_rubrique': 'Prime de transport',
                'type_rubrique': 'gain',
                'soumis_cnss': True,
                'soumis_irg': True,
                'ordre_calcul': 20,
                'ordre_affichage': 20,
            },
            {
                'code_rubrique': 'PRIME_RISQUE',
                'libelle_rubrique': 'Prime de risque',
                'type_rubrique': 'gain',
                'soumis_cnss': True,
                'soumis_irg': True,
                'ordre_calcul': 30,
                'ordre_affichage': 30,
            },
            {
                'code_rubrique': 'HEURES_SUP',
                'libelle_rubrique': 'Heures suppl√©mentaires',
                'type_rubrique': 'gain',
                'soumis_cnss': True,
                'soumis_irg': True,
                'ordre_calcul': 40,
                'ordre_affichage': 40,
            },
            {
                'code_rubrique': 'IND_REPAS',
                'libelle_rubrique': 'Indemnit√© de repas',
                'type_rubrique': 'gain',
                'soumis_cnss': True,
                'soumis_irg': True,
                'ordre_calcul': 50,
                'ordre_affichage': 50,
            },
            
            # RETENUES
            {
                'code_rubrique': 'CNSS_EMP',
                'libelle_rubrique': 'Cotisation CNSS (salari√©)',
                'type_rubrique': 'retenue',
                'taux_rubrique': Decimal('5.50'),  # 5.5% selon l'exercice
                'soumis_cnss': False,
                'soumis_irg': False,
                'ordre_calcul': 100,
                'ordre_affichage': 100,
            },
            {
                'code_rubrique': 'IRG',
                'libelle_rubrique': 'Imp√¥t sur le revenu (IRG/IRSA)',
                'type_rubrique': 'retenue',
                'soumis_cnss': False,
                'soumis_irg': False,
                'ordre_calcul': 110,
                'ordre_affichage': 110,
            },
            {
                'code_rubrique': 'AVANCE',
                'libelle_rubrique': 'Avance sur salaire',
                'type_rubrique': 'retenue',
                'soumis_cnss': False,
                'soumis_irg': False,
                'ordre_calcul': 120,
                'ordre_affichage': 120,
            },
            {
                'code_rubrique': 'RET_SYNDICAT',
                'libelle_rubrique': 'Retenue syndicale',
                'type_rubrique': 'retenue',
                'soumis_cnss': False,
                'soumis_irg': False,
                'ordre_calcul': 130,
                'ordre_affichage': 130,
            },
            
            # COTISATIONS PATRONALES
            {
                'code_rubrique': 'CNSS_PAT',
                'libelle_rubrique': 'Cotisation CNSS (employeur)',
                'type_rubrique': 'cotisation',
                'taux_rubrique': Decimal('18.00'),
                'soumis_cnss': False,
                'soumis_irg': False,
                'ordre_calcul': 200,
                'ordre_affichage': 200,
            },
        ]
        
        count_created = 0
        for rub_data in rubriques:
            rub, created = RubriquePaie.objects.get_or_create(
                code_rubrique=rub_data['code_rubrique'],
                defaults=rub_data
            )
            if created:
                count_created += 1
                self.stdout.write(self.style.SUCCESS(f'  ‚úì {rub_data["libelle_rubrique"]}'))
        
        if count_created == 0:
            self.stdout.write(self.style.WARNING('  ‚ö† Toutes les rubriques existent d√©j√†'))
        else:
            self.stdout.write(self.style.SUCCESS(f'  ‚úì {count_created} rubriques cr√©√©es'))

    def creer_periode_octobre_2025(self):
        """Cr√©er la p√©riode de paie Octobre 2025"""
        self.stdout.write('üìÖ Cr√©ation de la p√©riode Octobre 2025...')
        
        periode, created = PeriodePaie.objects.get_or_create(
            annee=2025,
            mois=10,
            defaults={
                'libelle': 'Octobre 2025',
                'date_debut': date(2025, 10, 1),
                'date_fin': date(2025, 10, 31),
                'statut_periode': 'ouverte',
                'nombre_jours_travailles': 22,
                'nombre_heures_mois': Decimal('173.33'),
            }
        )
        
        if created:
            self.stdout.write(self.style.SUCCESS('  ‚úì P√©riode Octobre 2025 cr√©√©e'))
        else:
            self.stdout.write(self.style.WARNING('  ‚ö† P√©riode Octobre 2025 d√©j√† existante'))
        
        return periode

    def verifier_constantes(self):
        """V√©rifier et ajouter les constantes manquantes"""
        self.stdout.write('üîç V√©rification des constantes...')
        
        # Ajouter la constante pour la r√©duction enfants
        const, created = Constante.objects.get_or_create(
            code='REDUC_ENFANT_IRG',
            defaults={
                'libelle': 'R√©duction IRG par enfant √† charge',
                'valeur': Decimal('5.00'),
                'type_valeur': 'pourcentage',
                'categorie': 'irg',
                'unite': '%',
                'date_debut_validite': date(2025, 1, 1),
                'actif': True,
                'description': 'R√©duction d\'imp√¥t de 5% par enfant √† charge (plafonn√© √† 2 enfants)'
            }
        )
        
        if created:
            self.stdout.write(self.style.SUCCESS('  ‚úì Constante REDUC_ENFANT_IRG cr√©√©e'))
        
        # Note sur le taux CNSS
        self.stdout.write(self.style.WARNING('  ‚ö† NOTE: L\'exercice utilise CNSS 5.5% au lieu de 5%'))
        self.stdout.write(self.style.WARNING('     La rubrique CNSS_EMP a √©t√© cr√©√©e avec 5.5%'))
