"""
Commande pour initialiser les param√®tres de paie selon la l√©gislation guin√©enne
"""
from django.core.management.base import BaseCommand
from django.utils import timezone
from datetime import date, datetime
from decimal import Decimal
from paie.models import ParametrePaie, Constante, TrancheIRG, Variable


class Command(BaseCommand):
    help = 'Initialise les param√®tres de paie conformes √† la l√©gislation guin√©enne 2025'

    def handle(self, *args, **options):
        self.stdout.write(self.style.SUCCESS('üá¨üá≥ Initialisation des param√®tres de paie Guin√©e...'))
        
        # 1. Cr√©er les param√®tres g√©n√©raux
        self.creer_parametres_generaux()
        
        # 2. Cr√©er les constantes
        self.creer_constantes()
        
        # 3. Cr√©er les tranches IRG
        self.creer_tranches_irg()
        
        # 4. Cr√©er les variables
        self.creer_variables()
        
        self.stdout.write(self.style.SUCCESS('‚úÖ Initialisation termin√©e avec succ√®s!'))

    def creer_parametres_generaux(self):
        """Cr√©er les param√®tres g√©n√©raux de paie"""
        self.stdout.write('üìã Cr√©ation des param√®tres g√©n√©raux...')
        
        aujourd_hui = date.today()
        
        param, created = ParametrePaie.objects.get_or_create(
            mois_en_cours=aujourd_hui.month,
            annee_en_cours=aujourd_hui.year,
            defaults={
                'date_debut_periode': date(aujourd_hui.year, aujourd_hui.month, 1),
                'date_fin_periode': date(aujourd_hui.year, aujourd_hui.month, 28),
                'regulation_active': True,
                'plafond_abattement_irg': Decimal('300000'),
                'taux_abattement_irg': Decimal('20.00'),
                'type_bulletin_defaut': 'standard',
                'type_paiement_defaut': 'virement',
                'nombre_max_rubriques': 100,
                'acompte_regulier_actif': True,
                'acompte_exceptionnel_actif': True,
                'montant_max_acompte_pct': Decimal('50.00'),
                'devise': 'GNF',
                'suppression_auto_non_presents': False,
                'conserver_historique_admin': True,
                'duree_conservation_mois': 120,
            }
        )
        
        if created:
            self.stdout.write(self.style.SUCCESS('  ‚úì Param√®tres g√©n√©raux cr√©√©s'))
        else:
            self.stdout.write(self.style.WARNING('  ‚ö† Param√®tres g√©n√©raux d√©j√† existants'))

    def creer_constantes(self):
        """Cr√©er les constantes de paie guin√©ennes"""
        self.stdout.write('üí∞ Cr√©ation des constantes...')
        
        constantes = [
            # SMIG
            {
                'code': 'SMIG',
                'libelle': 'Salaire Minimum Interprofessionnel Garanti',
                'valeur': Decimal('440000'),
                'type_valeur': 'montant',
                'categorie': 'general',
                'unite': 'GNF',
                'description': 'SMIG mensuel en Guin√©e (2025)'
            },
            
            # CNSS
            {
                'code': 'PLAFOND_CNSS',
                'libelle': 'Plafond de cotisation CNSS',
                'valeur': Decimal('3000000'),
                'type_valeur': 'montant',
                'categorie': 'cnss',
                'unite': 'GNF',
                'description': 'Plafond mensuel pour le calcul des cotisations CNSS'
            },
            {
                'code': 'TAUX_CNSS_EMPLOYE',
                'libelle': 'Taux CNSS part employ√©',
                'valeur': Decimal('5.00'),
                'type_valeur': 'pourcentage',
                'categorie': 'cnss',
                'unite': '%',
                'description': 'Part employ√© de la cotisation CNSS'
            },
            {
                'code': 'TAUX_CNSS_EMPLOYEUR',
                'libelle': 'Taux CNSS part employeur',
                'valeur': Decimal('18.00'),
                'type_valeur': 'pourcentage',
                'categorie': 'cnss',
                'unite': '%',
                'description': 'Part employeur de la cotisation CNSS'
            },
            
            # INAM
            {
                'code': 'PLAFOND_INAM',
                'libelle': 'Plafond de cotisation INAM',
                'valeur': Decimal('3000000'),
                'type_valeur': 'montant',
                'categorie': 'inam',
                'unite': 'GNF',
                'description': 'Plafond mensuel pour le calcul INAM'
            },
            {
                'code': 'TAUX_INAM',
                'libelle': 'Taux INAM',
                'valeur': Decimal('2.50'),
                'type_valeur': 'pourcentage',
                'categorie': 'inam',
                'unite': '%',
                'description': 'Taux de cotisation INAM'
            },
            
            # Temps de travail
            {
                'code': 'JOURS_MOIS',
                'libelle': 'Nombre de jours ouvrables par mois',
                'valeur': Decimal('22'),
                'type_valeur': 'nombre',
                'categorie': 'temps',
                'unite': 'jours',
                'description': 'Nombre moyen de jours travaill√©s par mois'
            },
            {
                'code': 'HEURES_MOIS',
                'libelle': 'Nombre d\'heures par mois',
                'valeur': Decimal('173.33'),
                'type_valeur': 'nombre',
                'categorie': 'temps',
                'unite': 'heures',
                'description': 'Nombre d\'heures mensuelles (40h/semaine)'
            },
            {
                'code': 'CONGES_ANNUELS',
                'libelle': 'Cong√©s annuels l√©gaux',
                'valeur': Decimal('26'),
                'type_valeur': 'nombre',
                'categorie': 'temps',
                'unite': 'jours',
                'description': 'Nombre de jours de cong√©s annuels selon Code du Travail'
            },
        ]
        
        for const_data in constantes:
            const, created = Constante.objects.get_or_create(
                code=const_data['code'],
                defaults={
                    **const_data,
                    'date_debut_validite': date(2025, 1, 1),
                    'actif': True
                }
            )
            if created:
                self.stdout.write(self.style.SUCCESS(f'  ‚úì {const_data["code"]}: {const_data["valeur"]} {const_data["unite"]}'))
            else:
                self.stdout.write(self.style.WARNING(f'  ‚ö† {const_data["code"]} d√©j√† existant'))

    def creer_tranches_irg(self):
        """Cr√©er les tranches du bar√®me IRG 2025"""
        self.stdout.write('üìä Cr√©ation des tranches IRG...')
        
        tranches = [
            {
                'numero_tranche': 1,
                'borne_inferieure': Decimal('0'),
                'borne_superieure': Decimal('1000000'),
                'taux_irg': Decimal('0.00'),
            },
            {
                'numero_tranche': 2,
                'borne_inferieure': Decimal('1000001'),
                'borne_superieure': Decimal('3000000'),
                'taux_irg': Decimal('5.00'),
            },
            {
                'numero_tranche': 3,
                'borne_inferieure': Decimal('3000001'),
                'borne_superieure': Decimal('6000000'),
                'taux_irg': Decimal('10.00'),
            },
            {
                'numero_tranche': 4,
                'borne_inferieure': Decimal('6000001'),
                'borne_superieure': Decimal('12000000'),
                'taux_irg': Decimal('15.00'),
            },
            {
                'numero_tranche': 5,
                'borne_inferieure': Decimal('12000001'),
                'borne_superieure': Decimal('25000000'),
                'taux_irg': Decimal('20.00'),
            },
            {
                'numero_tranche': 6,
                'borne_inferieure': Decimal('25000001'),
                'borne_superieure': None,  # Illimit√©
                'taux_irg': Decimal('25.00'),
            },
        ]
        
        for tranche_data in tranches:
            tranche, created = TrancheIRG.objects.get_or_create(
                annee_validite=2025,
                numero_tranche=tranche_data['numero_tranche'],
                defaults={
                    **tranche_data,
                    'date_debut_validite': date(2025, 1, 1),
                    'actif': True
                }
            )
            if created:
                if tranche_data['borne_superieure']:
                    self.stdout.write(self.style.SUCCESS(
                        f'  ‚úì Tranche {tranche_data["numero_tranche"]}: '
                        f'{tranche_data["borne_inferieure"]:,.0f} - {tranche_data["borne_superieure"]:,.0f} GNF '
                        f'({tranche_data["taux_irg"]}%)'
                    ))
                else:
                    self.stdout.write(self.style.SUCCESS(
                        f'  ‚úì Tranche {tranche_data["numero_tranche"]}: '
                        f'> {tranche_data["borne_inferieure"]:,.0f} GNF '
                        f'({tranche_data["taux_irg"]}%)'
                    ))
            else:
                self.stdout.write(self.style.WARNING(f'  ‚ö† Tranche {tranche_data["numero_tranche"]} d√©j√† existante'))

    def creer_variables(self):
        """Cr√©er les variables de paie"""
        self.stdout.write('üî¢ Cr√©ation des variables...')
        
        variables = [
            {
                'code': 'JOURS_PAYES',
                'libelle': 'Nombre de jours pay√©s',
                'type_variable': 'numerique',
                'portee': 'employe',
                'valeur_defaut': '22',
                'description': 'Nombre de jours travaill√©s et pay√©s dans le mois'
            },
            {
                'code': 'HEURES_SUP',
                'libelle': 'Heures suppl√©mentaires',
                'type_variable': 'numerique',
                'portee': 'employe',
                'valeur_defaut': '0',
                'description': 'Nombre d\'heures suppl√©mentaires effectu√©es'
            },
            {
                'code': 'TAUX_PRESENCE',
                'libelle': 'Taux de pr√©sence',
                'type_variable': 'numerique',
                'portee': 'employe',
                'valeur_defaut': '100',
                'description': 'Taux de pr√©sence en % pour le mois'
            },
        ]
        
        for var_data in variables:
            var, created = Variable.objects.get_or_create(
                code=var_data['code'],
                defaults={
                    **var_data,
                    'actif': True
                }
            )
            if created:
                self.stdout.write(self.style.SUCCESS(f'  ‚úì {var_data["code"]}: {var_data["libelle"]}'))
            else:
                self.stdout.write(self.style.WARNING(f'  ‚ö† {var_data["code"]} d√©j√† existante'))
