"""
Commande pour initialiser l'exercice complexe de paie
Entreprise MIN√âRAUX GUIN√âE SA - Employ√© Diallo Abdoulaye
Secteur minier avec convention collective sp√©cifique
"""
from django.core.management.base import BaseCommand
from datetime import date
from decimal import Decimal

from core.models import Societe, Etablissement, Service, Poste
from employes.models import Employe
from paie.models import (
    ParametrePaie, Constante, RubriquePaie, Variable,
    PeriodePaie
)


class Command(BaseCommand):
    help = 'Initialise l\'exercice complexe MIN√âRAUX GUIN√âE SA'

    def handle(self, *args, **options):
        self.stdout.write(self.style.SUCCESS('‚õèÔ∏è  Initialisation MIN√âRAUX GUIN√âE SA...'))
        
        # 1. Cr√©er la soci√©t√©
        societe = self.creer_societe()
        
        # 2. Cr√©er l'√©tablissement
        etablissement = self.creer_etablissement(societe)
        
        # 3. Cr√©er le service
        service = self.creer_service(etablissement)
        
        # 4. Cr√©er le poste
        poste = self.creer_poste(service)
        
        # 5. Cr√©er l'employ√©
        employe = self.creer_employe(etablissement, service, poste)
        
        # 6. Cr√©er les rubriques de paie (secteur minier)
        self.creer_rubriques_paie()
        
        # 7. Cr√©er la p√©riode novembre 2025
        periode = self.creer_periode_novembre_2025()
        
        # 8. Ajouter les constantes sp√©cifiques
        self.ajouter_constantes_specifiques()
        
        self.stdout.write(self.style.SUCCESS('‚úÖ Initialisation termin√©e!'))
        self.stdout.write(self.style.SUCCESS(f'   Soci√©t√© : {societe.raison_sociale}'))
        self.stdout.write(self.style.SUCCESS(f'   Employ√© : {employe.nom} {employe.prenoms}'))
        self.stdout.write(self.style.SUCCESS(f'   P√©riode : {periode}'))

    def creer_societe(self):
        """Cr√©er la soci√©t√© MIN√âRAUX GUIN√âE SA"""
        self.stdout.write('üè¢ Cr√©ation MIN√âRAUX GUIN√âE SA...')
        
        societe, created = Societe.objects.get_or_create(
            raison_sociale='MIN√âRAUX GUIN√âE SA',
            defaults={
                'forme_juridique': 'SA',
                'ville': 'Kindia',
                'pays': 'Guin√©e',
                'secteur_activite': 'Exploitation mini√®re',
                'actif': True
            }
        )
        
        if created:
            self.stdout.write(self.style.SUCCESS('  ‚úì Soci√©t√© cr√©√©e'))
        else:
            self.stdout.write(self.style.WARNING('  ‚ö† Soci√©t√© d√©j√† existante'))
        
        return societe

    def creer_etablissement(self, societe):
        """Cr√©er l'√©tablissement"""
        self.stdout.write('üè≠ Cr√©ation √©tablissement...')
        
        etablissement, created = Etablissement.objects.get_or_create(
            societe=societe,
            code_etablissement='MG-KINDIA',
            defaults={
                'nom_etablissement': 'Site minier de Kindia',
                'type_etablissement': 'Site d\'exploitation',
                'ville': 'Kindia',
                'actif': True
            }
        )
        
        if created:
            self.stdout.write(self.style.SUCCESS('  ‚úì √âtablissement cr√©√©'))
        else:
            self.stdout.write(self.style.WARNING('  ‚ö† √âtablissement d√©j√† existant'))
        
        return etablissement

    def creer_service(self, etablissement):
        """Cr√©er le service Exploitation"""
        self.stdout.write('‚õèÔ∏è  Cr√©ation service Exploitation...')
        
        service, created = Service.objects.get_or_create(
            etablissement=etablissement,
            code_service='EXPLOIT',
            defaults={
                'nom_service': 'Exploitation mini√®re',
                'actif': True
            }
        )
        
        if created:
            self.stdout.write(self.style.SUCCESS('  ‚úì Service cr√©√©'))
        else:
            self.stdout.write(self.style.WARNING('  ‚ö† Service d√©j√† existant'))
        
        return service

    def creer_poste(self, service):
        """Cr√©er le poste Responsable de chantier"""
        self.stdout.write('üë∑ Cr√©ation du poste...')
        
        poste, created = Poste.objects.get_or_create(
            code_poste='RESP-CHANT-A',
            defaults={
                'intitule_poste': 'Responsable de chantier',
                'service': service,
                'categorie_professionnelle': 'Cadre',
                'classification': 'A',
                'actif': True
            }
        )
        
        if created:
            self.stdout.write(self.style.SUCCESS('  ‚úì Poste cr√©√©'))
        else:
            self.stdout.write(self.style.WARNING('  ‚ö† Poste d√©j√† existant'))
        
        return poste

    def creer_employe(self, etablissement, service, poste):
        """Cr√©er l'employ√© Diallo Abdoulaye"""
        self.stdout.write('üë§ Cr√©ation employ√© Diallo Abdoulaye...')
        
        employe, created = Employe.objects.get_or_create(
            matricule='MG-2021-847',
            defaults={
                'civilite': 'M.',
                'nom': 'Diallo',
                'prenoms': 'Abdoulaye',
                'sexe': 'M',
                'situation_matrimoniale': 'Mari√©(e)',
                'nombre_enfants': 3,
                'date_naissance': date(1985, 5, 10),
                'nationalite': 'Guin√©enne',
                'num_cnss_individuel': '987654321',
                'etablissement': etablissement,
                'service': service,
                'poste': poste,
                'date_embauche': date(2020, 3, 15),
                'type_contrat': 'CDI',
                'statut_employe': 'Actif',
                'telephone_principal': '+224 621 00 00 00',
            }
        )
        
        if created:
            self.stdout.write(self.style.SUCCESS('  ‚úì Employ√© cr√©√©'))
            self.stdout.write(self.style.SUCCESS(f'     Matricule : {employe.matricule}'))
            self.stdout.write(self.style.SUCCESS(f'     Anciennet√© : 5 ans'))
            self.stdout.write(self.style.SUCCESS(f'     Situation : Mari√©, {employe.nombre_enfants} enfants'))
        else:
            self.stdout.write(self.style.WARNING('  ‚ö† Employ√© d√©j√† existant'))
        
        return employe

    def creer_rubriques_paie(self):
        """Cr√©er les rubriques de paie pour le secteur minier"""
        self.stdout.write('üí∞ Cr√©ation rubriques de paie...')
        
        rubriques = [
            # ===== GAINS - SALAIRES ET INDEMNIT√âS DE BASE =====
            {
                'code_rubrique': 'SAL_BASE_CAT_A',
                'libelle_rubrique': 'Salaire mensuel de base (Cat√©gorie A)',
                'type_rubrique': 'gain',
                'soumis_cnss': True,
                'soumis_irg': True,
                'ordre_calcul': 10,
                'ordre_affichage': 10,
            },
            {
                'code_rubrique': 'IND_FONCTION',
                'libelle_rubrique': 'Indemnit√© de fonction',
                'type_rubrique': 'gain',
                'soumis_cnss': True,
                'soumis_irg': True,
                'ordre_calcul': 20,
                'ordre_affichage': 20,
            },
            {
                'code_rubrique': 'PRIME_ANCIENNETE',
                'libelle_rubrique': 'Prime d\'anciennet√©',
                'type_rubrique': 'gain',
                'soumis_cnss': True,
                'soumis_irg': True,
                'ordre_calcul': 30,
                'ordre_affichage': 30,
                'formule_calcul': 'SAL_BASE * TAUX_ANCIENNETE',
            },
            {
                'code_rubrique': 'PRIME_RESP',
                'libelle_rubrique': 'Prime de responsabilit√©',
                'type_rubrique': 'gain',
                'soumis_cnss': True,
                'soumis_irg': True,
                'ordre_calcul': 40,
                'ordre_affichage': 40,
            },
            
            # ===== R√âMUN√âRATIONS VARIABLES =====
            {
                'code_rubrique': 'PRIME_PROD',
                'libelle_rubrique': 'Prime de production',
                'type_rubrique': 'gain',
                'soumis_cnss': True,
                'soumis_irg': True,
                'ordre_calcul': 50,
                'ordre_affichage': 50,
            },
            {
                'code_rubrique': 'BONUS_SECURITE',
                'libelle_rubrique': 'Bonus de s√©curit√©',
                'type_rubrique': 'gain',
                'soumis_cnss': True,
                'soumis_irg': True,
                'ordre_calcul': 60,
                'ordre_affichage': 60,
            },
            {
                'code_rubrique': 'COMMISSION_CA',
                'libelle_rubrique': 'Commission sur chiffre d\'affaires',
                'type_rubrique': 'gain',
                'soumis_cnss': True,
                'soumis_irg': True,
                'ordre_calcul': 70,
                'ordre_affichage': 70,
            },
            
            # ===== INDEMNIT√âS ET ALLOCATIONS =====
            {
                'code_rubrique': 'IND_DEPLACE',
                'libelle_rubrique': 'Indemnit√© de d√©placement',
                'type_rubrique': 'gain',
                'soumis_cnss': True,
                'soumis_irg': False,  # Souvent exon√©r√©
                'ordre_calcul': 80,
                'ordre_affichage': 80,
            },
            {
                'code_rubrique': 'IND_REPAS_JOUR',
                'libelle_rubrique': 'Indemnit√© de repas',
                'type_rubrique': 'gain',
                'soumis_cnss': True,
                'soumis_irg': False,  # Souvent exon√©r√©
                'ordre_calcul': 90,
                'ordre_affichage': 90,
            },
            {
                'code_rubrique': 'ALLOC_LOGEMENT',
                'libelle_rubrique': 'Allocation logement',
                'type_rubrique': 'gain',
                'soumis_cnss': True,
                'soumis_irg': True,
                'ordre_calcul': 100,
                'ordre_affichage': 100,
            },
            {
                'code_rubrique': 'ALLOC_TRANSPORT',
                'libelle_rubrique': 'Allocation transport',
                'type_rubrique': 'gain',
                'soumis_cnss': True,
                'soumis_irg': True,
                'ordre_calcul': 110,
                'ordre_affichage': 110,
            },
            
            # ===== HEURES SUPPL√âMENTAIRES =====
            {
                'code_rubrique': 'HS_25',
                'libelle_rubrique': 'Heures suppl√©mentaires (+25%)',
                'type_rubrique': 'gain',
                'soumis_cnss': True,
                'soumis_irg': True,
                'taux_rubrique': Decimal('1.25'),
                'ordre_calcul': 120,
                'ordre_affichage': 120,
            },
            
            # ===== RETENUES OBLIGATOIRES =====
            {
                'code_rubrique': 'CNSS_SAL_MINIER',
                'libelle_rubrique': 'Cotisation CNSS (salari√©)',
                'type_rubrique': 'retenue',
                'taux_rubrique': Decimal('5.50'),
                'soumis_cnss': False,
                'soumis_irg': False,
                'ordre_calcul': 200,
                'ordre_affichage': 200,
            },
            {
                'code_rubrique': 'MUTUELLE_ENT',
                'libelle_rubrique': 'Cotisation mutuelle d\'entreprise',
                'type_rubrique': 'retenue',
                'taux_rubrique': Decimal('3.00'),
                'soumis_cnss': False,
                'soumis_irg': False,
                'ordre_calcul': 210,
                'ordre_affichage': 210,
            },
            {
                'code_rubrique': 'IRSA_MINIER',
                'libelle_rubrique': 'IRSA (Imp√¥t sur le revenu)',
                'type_rubrique': 'retenue',
                'soumis_cnss': False,
                'soumis_irg': False,
                'ordre_calcul': 220,
                'ordre_affichage': 220,
            },
            
            # ===== AUTRES RETENUES =====
            {
                'code_rubrique': 'AVANCE_SAL',
                'libelle_rubrique': 'Avance sur salaire',
                'type_rubrique': 'retenue',
                'soumis_cnss': False,
                'soumis_irg': False,
                'ordre_calcul': 300,
                'ordre_affichage': 300,
            },
            {
                'code_rubrique': 'RET_SYNDICAT',
                'libelle_rubrique': 'Retenue syndicale',
                'type_rubrique': 'retenue',
                'soumis_cnss': False,
                'soumis_irg': False,
                'ordre_calcul': 310,
                'ordre_affichage': 310,
            },
            {
                'code_rubrique': 'PRET_LOGEMENT',
                'libelle_rubrique': 'Remboursement pr√™t logement',
                'type_rubrique': 'retenue',
                'soumis_cnss': False,
                'soumis_irg': False,
                'ordre_calcul': 320,
                'ordre_affichage': 320,
            },
            {
                'code_rubrique': 'RET_DISCIPLINAIRE',
                'libelle_rubrique': 'Retenue disciplinaire',
                'type_rubrique': 'retenue',
                'soumis_cnss': False,
                'soumis_irg': False,
                'ordre_calcul': 330,
                'ordre_affichage': 330,
            },
            
            # ===== COTISATIONS PATRONALES =====
            {
                'code_rubrique': 'CNSS_PAT_MINIER',
                'libelle_rubrique': 'CNSS Employeur',
                'type_rubrique': 'cotisation',
                'taux_rubrique': Decimal('8.10'),
                'soumis_cnss': False,
                'soumis_irg': False,
                'ordre_calcul': 400,
                'ordre_affichage': 400,
            },
            {
                'code_rubrique': 'COTIS_MATERNITE',
                'libelle_rubrique': 'Cotisation Maternit√©',
                'type_rubrique': 'cotisation',
                'taux_rubrique': Decimal('1.50'),
                'soumis_cnss': False,
                'soumis_irg': False,
                'ordre_calcul': 410,
                'ordre_affichage': 410,
            },
        ]
        
        count_created = 0
        for rub_data in rubriques:
            rub, created = RubriquePaie.objects.get_or_create(
                code_rubrique=rub_data['code_rubrique'],
                defaults=rub_data
            )
            if created:
                count_created += 1
        
        if count_created > 0:
            self.stdout.write(self.style.SUCCESS(f'  ‚úì {count_created} rubriques cr√©√©es'))
        else:
            self.stdout.write(self.style.WARNING('  ‚ö† Toutes les rubriques existent d√©j√†'))

    def creer_periode_novembre_2025(self):
        """Cr√©er la p√©riode novembre 2025"""
        self.stdout.write('üìÖ Cr√©ation p√©riode Novembre 2025...')
        
        periode, created = PeriodePaie.objects.get_or_create(
            annee=2025,
            mois=11,
            defaults={
                'libelle': 'Novembre 2025',
                'date_debut': date(2025, 11, 1),
                'date_fin': date(2025, 11, 30),
                'statut_periode': 'ouverte',
                'nombre_jours_travailles': 22,
                'nombre_heures_mois': Decimal('173.33'),
            }
        )
        
        if created:
            self.stdout.write(self.style.SUCCESS('  ‚úì P√©riode cr√©√©e'))
        else:
            self.stdout.write(self.style.WARNING('  ‚ö† P√©riode d√©j√† existante'))
        
        return periode

    def ajouter_constantes_specifiques(self):
        """Ajouter les constantes sp√©cifiques au secteur minier"""
        self.stdout.write('üîß Ajout constantes sp√©cifiques...')
        
        constantes = [
            # Taux d'anciennet√©
            {
                'code': 'TAUX_ANCIENNETE_5ANS',
                'libelle': 'Taux prime d\'anciennet√© (5 ans)',
                'valeur': Decimal('5.00'),
                'type_valeur': 'pourcentage',
                'categorie': 'general',
                'unite': '%',
                'description': '5% du salaire de base apr√®s 5 ans d\'anciennet√©'
            },
            
            # D√©ductions familiales IRSA
            {
                'code': 'DEDUC_CONJOINT',
                'libelle': 'D√©duction IRSA conjoint √† charge',
                'valeur': Decimal('50000'),
                'type_valeur': 'montant',
                'categorie': 'irg',
                'unite': 'GNF',
                'description': 'D√©duction fixe pour conjoint √† charge'
            },
            {
                'code': 'DEDUC_ENFANT',
                'libelle': 'D√©duction IRSA par enfant',
                'valeur': Decimal('75000'),
                'type_valeur': 'montant',
                'categorie': 'irg',
                'unite': 'GNF',
                'description': 'D√©duction par enfant √† charge (max 3)'
            },
            {
                'code': 'MAX_ENFANTS_DEDUC',
                'libelle': 'Nombre maximum d\'enfants d√©ductibles',
                'valeur': Decimal('3'),
                'type_valeur': 'nombre',
                'categorie': 'irg',
                'unite': 'enfants',
                'description': 'Maximum 3 enfants pour d√©ductions fiscales'
            },
            
            # Taux mutuelle
            {
                'code': 'TAUX_MUTUELLE_ENT',
                'libelle': 'Taux cotisation mutuelle d\'entreprise',
                'valeur': Decimal('3.00'),
                'type_valeur': 'pourcentage',
                'categorie': 'general',
                'unite': '%',
                'description': 'Cotisation mutuelle obligatoire secteur minier'
            },
            
            # Taux CNSS minier
            {
                'code': 'TAUX_CNSS_PAT_MINIER',
                'libelle': 'Taux CNSS employeur (secteur minier)',
                'valeur': Decimal('8.10'),
                'type_valeur': 'pourcentage',
                'categorie': 'cnss',
                'unite': '%',
                'description': 'Taux CNSS patronal pour secteur minier'
            },
            {
                'code': 'TAUX_MATERNITE',
                'libelle': 'Taux cotisation maternit√©',
                'valeur': Decimal('1.50'),
                'type_valeur': 'pourcentage',
                'categorie': 'cnss',
                'unite': '%',
                'description': 'Cotisation maternit√© (charge patronale)'
            },
            
            # Heures de base
            {
                'code': 'HEURES_BASE_MOIS',
                'libelle': 'Nombre d\'heures de base par mois',
                'valeur': Decimal('173.00'),
                'type_valeur': 'nombre',
                'categorie': 'temps',
                'unite': 'heures',
                'description': 'Base de calcul pour taux horaire (40h/semaine)'
            },
        ]
        
        count_created = 0
        for const_data in constantes:
            const, created = Constante.objects.get_or_create(
                code=const_data['code'],
                defaults={
                    **const_data,
                    'date_debut_validite': date(2025, 1, 1),
                    'actif': True
                }
            )
            if created:
                count_created += 1
        
        if count_created > 0:
            self.stdout.write(self.style.SUCCESS(f'  ‚úì {count_created} constantes ajout√©es'))
        else:
            self.stdout.write(self.style.WARNING('  ‚ö† Toutes les constantes existent d√©j√†'))
