"""
Commande pour initialiser les jours f√©ri√©s guin√©ens
"""
from django.core.management.base import BaseCommand
from datetime import date
from temps_travail.models import JourFerie


class Command(BaseCommand):
    help = 'Initialise les jours f√©ri√©s de la Guin√©e pour 2025'

    def add_arguments(self, parser):
        parser.add_argument(
            '--annee',
            type=int,
            default=2025,
            help='Ann√©e pour laquelle cr√©er les jours f√©ri√©s'
        )

    def handle(self, *args, **options):
        annee = options['annee']
        self.stdout.write(self.style.SUCCESS(f'üá¨üá≥ Initialisation des jours f√©ri√©s Guin√©e {annee}...'))
        
        jours_feries = [
            # Jours f√©ri√©s fixes
            {
                'libelle': 'Jour de l\'An',
                'date': date(annee, 1, 1),
                'type_ferie': 'national',
                'recurrent': True
            },
            {
                'libelle': 'F√™te du Travail',
                'date': date(annee, 5, 1),
                'type_ferie': 'national',
                'recurrent': True
            },
            {
                'libelle': 'F√™te de l\'Ind√©pendance',
                'date': date(annee, 10, 2),
                'type_ferie': 'national',
                'recurrent': True
            },
            {
                'libelle': 'Jour de la R√©publique',
                'date': date(annee, 10, 2),
                'type_ferie': 'national',
                'recurrent': True
            },
            {
                'libelle': 'No√´l',
                'date': date(annee, 12, 25),
                'type_ferie': 'national',
                'recurrent': True
            },
            
            # F√™tes religieuses musulmanes (dates approximatives pour 2025)
            # Note: Ces dates varient selon le calendrier lunaire
            {
                'libelle': 'A√Ød el-Fitr (Fin du Ramadan)',
                'date': date(annee, 3, 30),  # Date approximative
                'type_ferie': 'religieux',
                'recurrent': False,
                'observations': 'Date √† confirmer selon calendrier lunaire'
            },
            {
                'libelle': 'A√Ød el-Kebir (Tabaski)',
                'date': date(annee, 6, 6),  # Date approximative
                'type_ferie': 'religieux',
                'recurrent': False,
                'observations': 'Date √† confirmer selon calendrier lunaire'
            },
            {
                'libelle': 'Mawlid (Naissance du Proph√®te)',
                'date': date(annee, 9, 5),  # Date approximative
                'type_ferie': 'religieux',
                'recurrent': False,
                'observations': 'Date √† confirmer selon calendrier lunaire'
            },
            
            # F√™tes chr√©tiennes
            {
                'libelle': 'Vendredi Saint',
                'date': date(annee, 4, 18),  # Date approximative pour 2025
                'type_ferie': 'religieux',
                'recurrent': False,
                'observations': 'Date √† confirmer selon calendrier chr√©tien'
            },
            {
                'libelle': 'Lundi de P√¢ques',
                'date': date(annee, 4, 21),  # Date approximative pour 2025
                'type_ferie': 'religieux',
                'recurrent': False,
                'observations': 'Date √† confirmer selon calendrier chr√©tien'
            },
            {
                'libelle': 'Assomption',
                'date': date(annee, 8, 15),
                'type_ferie': 'religieux',
                'recurrent': True
            },
        ]
        
        count_created = 0
        count_existing = 0
        
        for jour_data in jours_feries:
            jour, created = JourFerie.objects.get_or_create(
                date_jour_ferie=jour_data['date'],
                defaults={
                    'libelle': jour_data['libelle'],
                    'annee': annee,
                    'type_ferie': jour_data['type_ferie'],
                    'recurrent': jour_data['recurrent'],
                    'observations': jour_data.get('observations', '')
                }
            )
            
            if created:
                count_created += 1
                self.stdout.write(self.style.SUCCESS(
                    f'  ‚úì {jour_data["libelle"]}: {jour_data["date"].strftime("%d/%m/%Y")}'
                ))
            else:
                count_existing += 1
                self.stdout.write(self.style.WARNING(
                    f'  ‚ö† {jour_data["libelle"]}: d√©j√† existant'
                ))
        
        self.stdout.write(self.style.SUCCESS(
            f'\n‚úÖ Termin√©: {count_created} jours f√©ri√©s cr√©√©s, {count_existing} d√©j√† existants'
        ))
        self.stdout.write(self.style.WARNING(
            '\n‚ö†Ô∏è  Note: Les dates des f√™tes religieuses musulmanes et chr√©tiennes sont approximatives.'
        ))
        self.stdout.write(self.style.WARNING(
            '   Veuillez les v√©rifier et les ajuster selon le calendrier officiel.'
        ))
